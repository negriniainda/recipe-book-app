import React, {useState, useCallback} from 'react';
import {View, StyleSheet, ScrollView} from 'react-native';
import {\n  Text,\n  Card,\n  TextInput,\n  Button,\n  IconButton,\n  Chip,\n  Menu,\n  Divider,\n} from 'react-native-paper';\nimport {RecipeNote, CreateRecipeNoteInput} from '@/types';\nimport {theme} from '@/utils/theme';\n\ninterface RecipeNotesProps {\n  recipeId: string;\n  notes: RecipeNote[];\n  onAddNote: (note: CreateRecipeNoteInput) => void;\n  onUpdateNote: (noteId: string, content: string) => void;\n  onDeleteNote: (noteId: string) => void;\n  onTogglePrivate?: (noteId: string, isPrivate: boolean) => void;\n  loading?: boolean;\n  style?: any;\n}\n\nconst NOTE_TYPES = {\n  general: {label: 'Geral', icon: 'note-text', color: theme.colors.primary},\n  modification: {label: 'Modificação', icon: 'pencil', color: '#FF9800'},\n  tip: {label: 'Dica', icon: 'lightbulb', color: '#4CAF50'},\n  warning: {label: 'Atenção', icon: 'alert', color: '#F44336'},\n  ingredient: {label: 'Ingrediente', icon: 'food-apple', color: '#9C27B0'},\n  technique: {label: 'Técnica', icon: 'chef-hat', color: '#2196F3'},\n};\n\nconst RecipeNotes: React.FC<RecipeNotesProps> = ({\n  recipeId,\n  notes,\n  onAddNote,\n  onUpdateNote,\n  onDeleteNote,\n  onTogglePrivate,\n  loading = false,\n  style,\n}) => {\n  const [isAddingNote, setIsAddingNote] = useState(false);\n  const [newNoteContent, setNewNoteContent] = useState('');\n  const [newNoteType, setNewNoteType] = useState<keyof typeof NOTE_TYPES>('general');\n  const [newNotePrivate, setNewNotePrivate] = useState(false);\n  const [editingNoteId, setEditingNoteId] = useState<string | null>(null);\n  const [editingContent, setEditingContent] = useState('');\n  const [menuVisible, setMenuVisible] = useState<string | null>(null);\n\n  const handleAddNote = useCallback(() => {\n    if (newNoteContent.trim()) {\n      onAddNote({\n        recipeId,\n        content: newNoteContent.trim(),\n        type: newNoteType,\n        isPrivate: newNotePrivate,\n      });\n      setNewNoteContent('');\n      setNewNoteType('general');\n      setNewNotePrivate(false);\n      setIsAddingNote(false);\n    }\n  }, [recipeId, newNoteContent, newNoteType, newNotePrivate, onAddNote]);\n\n  const handleStartEdit = useCallback((note: RecipeNote) => {\n    setEditingNoteId(note.id);\n    setEditingContent(note.content);\n  }, []);\n\n  const handleSaveEdit = useCallback(() => {\n    if (editingNoteId && editingContent.trim()) {\n      onUpdateNote(editingNoteId, editingContent.trim());\n      setEditingNoteId(null);\n      setEditingContent('');\n    }\n  }, [editingNoteId, editingContent, onUpdateNote]);\n\n  const handleCancelEdit = useCallback(() => {\n    setEditingNoteId(null);\n    setEditingContent('');\n  }, []);\n\n  const handleDeleteNote = useCallback((noteId: string) => {\n    onDeleteNote(noteId);\n    setMenuVisible(null);\n  }, [onDeleteNote]);\n\n  const handleTogglePrivate = useCallback((note: RecipeNote) => {\n    if (onTogglePrivate) {\n      onTogglePrivate(note.id, !note.isPrivate);\n    }\n    setMenuVisible(null);\n  }, [onTogglePrivate]);\n\n  const formatDate = useCallback((date: Date) => {\n    return date.toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  }, []);\n\n  const sortedNotes = React.useMemo(() => {\n    return [...notes].sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }, [notes]);\n\n  return (\n    <View style={[styles.container, style]}>\n      {/* Header */}\n      <View style={styles.header}>\n        <Text variant=\"titleMedium\" style={styles.title}>\n          Minhas Anotações ({notes.length})\n        </Text>\n        <Button\n          mode=\"outlined\"\n          icon=\"plus\"\n          onPress={() => setIsAddingNote(true)}\n          disabled={loading}\n          compact>\n          Adicionar\n        </Button>\n      </View>\n\n      {/* Add Note Form */}\n      {isAddingNote && (\n        <Card style={styles.addNoteCard}>\n          <Card.Content>\n            <Text variant=\"titleSmall\" style={styles.addNoteTitle}>\n              Nova Anotação\n            </Text>\n            \n            {/* Note Type Selector */}\n            <View style={styles.typeSelector}>\n              <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n                {Object.entries(NOTE_TYPES).map(([key, type]) => (\n                  <Chip\n                    key={key}\n                    mode={newNoteType === key ? 'flat' : 'outlined'}\n                    selected={newNoteType === key}\n                    onPress={() => setNewNoteType(key as keyof typeof NOTE_TYPES)}\n                    icon={type.icon}\n                    style={[\n                      styles.typeChip,\n                      newNoteType === key && {\n                        backgroundColor: type.color + '20',\n                        borderColor: type.color,\n                      },\n                    ]}\n                    textStyle={[\n                      newNoteType === key && {color: type.color},\n                    ]}>\n                    {type.label}\n                  </Chip>\n                ))}\n              </ScrollView>\n            </View>\n\n            {/* Note Content */}\n            <TextInput\n              mode=\"outlined\"\n              placeholder=\"Digite sua anotação...\"\n              value={newNoteContent}\n              onChangeText={setNewNoteContent}\n              multiline\n              numberOfLines={4}\n              style={styles.noteInput}\n            />\n\n            {/* Privacy Toggle */}\n            <View style={styles.privacyContainer}>\n              <Chip\n                mode={newNotePrivate ? 'flat' : 'outlined'}\n                selected={newNotePrivate}\n                onPress={() => setNewNotePrivate(!newNotePrivate)}\n                icon={newNotePrivate ? 'lock' : 'lock-open'}\n                style={styles.privacyChip}>\n                {newNotePrivate ? 'Privada' : 'Pública'}\n              </Chip>\n              <Text variant=\"bodySmall\" style={styles.privacyHint}>\n                {newNotePrivate \n                  ? 'Apenas você pode ver esta anotação'\n                  : 'Outros usuários podem ver esta anotação'\n                }\n              </Text>\n            </View>\n\n            {/* Actions */}\n            <View style={styles.addNoteActions}>\n              <Button\n                mode=\"outlined\"\n                onPress={() => {\n                  setIsAddingNote(false);\n                  setNewNoteContent('');\n                  setNewNoteType('general');\n                  setNewNotePrivate(false);\n                }}\n                disabled={loading}>\n                Cancelar\n              </Button>\n              <Button\n                mode=\"contained\"\n                onPress={handleAddNote}\n                disabled={!newNoteContent.trim() || loading}\n                loading={loading}>\n                Salvar\n              </Button>\n            </View>\n          </Card.Content>\n        </Card>\n      )}\n\n      {/* Notes List */}\n      <ScrollView style={styles.notesList} showsVerticalScrollIndicator={false}>\n        {sortedNotes.map(note => {\n          const noteType = NOTE_TYPES[note.type as keyof typeof NOTE_TYPES] || NOTE_TYPES.general;\n          const isEditing = editingNoteId === note.id;\n\n          return (\n            <Card key={note.id} style={styles.noteCard}>\n              <Card.Content>\n                {/* Note Header */}\n                <View style={styles.noteHeader}>\n                  <View style={styles.noteInfo}>\n                    <Chip\n                      mode=\"flat\"\n                      icon={noteType.icon}\n                      style={[\n                        styles.noteTypeChip,\n                        {backgroundColor: noteType.color + '20'},\n                      ]}\n                      textStyle={{color: noteType.color}}\n                      compact>\n                      {noteType.label}\n                    </Chip>\n                    \n                    {note.isPrivate && (\n                      <Chip\n                        mode=\"outlined\"\n                        icon=\"lock\"\n                        style={styles.privateChip}\n                        compact>\n                        Privada\n                      </Chip>\n                    )}\n                  </View>\n\n                  <Menu\n                    visible={menuVisible === note.id}\n                    onDismiss={() => setMenuVisible(null)}\n                    anchor={\n                      <IconButton\n                        icon=\"dots-vertical\"\n                        size={20}\n                        onPress={() => setMenuVisible(note.id)}\n                      />\n                    }>\n                    <Menu.Item\n                      onPress={() => {\n                        handleStartEdit(note);\n                        setMenuVisible(null);\n                      }}\n                      title=\"Editar\"\n                      leadingIcon=\"pencil\"\n                    />\n                    {onTogglePrivate && (\n                      <Menu.Item\n                        onPress={() => handleTogglePrivate(note)}\n                        title={note.isPrivate ? 'Tornar pública' : 'Tornar privada'}\n                        leadingIcon={note.isPrivate ? 'lock-open' : 'lock'}\n                      />\n                    )}\n                    <Divider />\n                    <Menu.Item\n                      onPress={() => handleDeleteNote(note.id)}\n                      title=\"Excluir\"\n                      leadingIcon=\"delete\"\n                      titleStyle={{color: theme.colors.error}}\n                    />\n                  </Menu>\n                </View>\n\n                {/* Note Content */}\n                {isEditing ? (\n                  <View style={styles.editContainer}>\n                    <TextInput\n                      mode=\"outlined\"\n                      value={editingContent}\n                      onChangeText={setEditingContent}\n                      multiline\n                      numberOfLines={4}\n                      style={styles.editInput}\n                    />\n                    <View style={styles.editActions}>\n                      <Button\n                        mode=\"outlined\"\n                        onPress={handleCancelEdit}\n                        compact>\n                        Cancelar\n                      </Button>\n                      <Button\n                        mode=\"contained\"\n                        onPress={handleSaveEdit}\n                        disabled={!editingContent.trim()}\n                        compact>\n                        Salvar\n                      </Button>\n                    </View>\n                  </View>\n                ) : (\n                  <Text variant=\"bodyMedium\" style={styles.noteContent}>\n                    {note.content}\n                  </Text>\n                )}\n\n                {/* Note Footer */}\n                <View style={styles.noteFooter}>\n                  <Text variant=\"bodySmall\" style={styles.noteDate}>\n                    {formatDate(new Date(note.createdAt))}\n                    {note.updatedAt !== note.createdAt && ' • Editada'}\n                  </Text>\n                </View>\n              </Card.Content>\n            </Card>\n          );\n        })}\n\n        {notes.length === 0 && !isAddingNote && (\n          <Card style={styles.emptyCard}>\n            <Card.Content style={styles.emptyContent}>\n              <Text variant=\"bodyMedium\" style={styles.emptyText}>\n                Nenhuma anotação ainda\n              </Text>\n              <Text variant=\"bodySmall\" style={styles.emptySubtext}>\n                Adicione suas observações, dicas e modificações sobre esta receita\n              </Text>\n            </Card.Content>\n          </Card>\n        )}\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  title: {\n    fontWeight: 'bold',\n    color: theme.colors.primary,\n  },\n  addNoteCard: {\n    marginBottom: 16,\n    elevation: 2,\n  },\n  addNoteTitle: {\n    fontWeight: '600',\n    marginBottom: 16,\n  },\n  typeSelector: {\n    marginBottom: 16,\n  },\n  typeChip: {\n    marginRight: 8,\n  },\n  noteInput: {\n    backgroundColor: theme.colors.background,\n    marginBottom: 16,\n  },\n  privacyContainer: {\n    marginBottom: 16,\n  },\n  privacyChip: {\n    alignSelf: 'flex-start',\n    marginBottom: 8,\n  },\n  privacyHint: {\n    opacity: 0.7,\n    lineHeight: 16,\n  },\n  addNoteActions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    gap: 12,\n  },\n  notesList: {\n    flex: 1,\n  },\n  noteCard: {\n    marginBottom: 12,\n    elevation: 1,\n  },\n  noteHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  noteInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    flex: 1,\n  },\n  noteTypeChip: {\n    height: 28,\n  },\n  privateChip: {\n    height: 28,\n  },\n  noteContent: {\n    lineHeight: 20,\n    marginBottom: 12,\n  },\n  editContainer: {\n    marginBottom: 12,\n  },\n  editInput: {\n    backgroundColor: theme.colors.background,\n    marginBottom: 12,\n  },\n  editActions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    gap: 8,\n  },\n  noteFooter: {\n    borderTopWidth: 1,\n    borderTopColor: theme.colors.outline + '20',\n    paddingTop: 8,\n  },\n  noteDate: {\n    opacity: 0.7,\n  },\n  emptyCard: {\n    marginTop: 16,\n  },\n  emptyContent: {\n    alignItems: 'center',\n    paddingVertical: 32,\n  },\n  emptyText: {\n    fontWeight: '500',\n    marginBottom: 8,\n  },\n  emptySubtext: {\n    opacity: 0.7,\n    textAlign: 'center',\n    lineHeight: 18,\n  },\n});\n\nexport default RecipeNotes;
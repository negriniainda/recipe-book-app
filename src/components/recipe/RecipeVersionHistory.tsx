import React, {useState, useCallback} from 'react';\nimport {View, StyleSheet, ScrollView, Alert} from 'react-native';\nimport {\n  Text,\n  Card,\n  Button,\n  IconButton,\n  Chip,\n  Menu,\n  Divider,\n  Badge,\n} from 'react-native-paper';\nimport {RecipeVersion, Recipe} from '@/types';\nimport {theme} from '@/utils/theme';\n\ninterface RecipeVersionHistoryProps {\n  recipe: Recipe;\n  versions: RecipeVersion[];\n  onCreateVersion: (baseVersionId?: string) => void;\n  onRestoreVersion: (versionId: string) => void;\n  onDeleteVersion: (versionId: string) => void;\n  onViewVersion: (version: RecipeVersion) => void;\n  onCompareVersions: (version1Id: string, version2Id: string) => void;\n  loading?: boolean;\n  style?: any;\n}\n\nconst VERSION_TYPES = {\n  original: {label: 'Original', color: theme.colors.primary, icon: 'star'},\n  modification: {label: 'Modificação', color: '#FF9800', icon: 'pencil'},\n  improvement: {label: 'Melhoria', color: '#4CAF50', icon: 'trending-up'},\n  adaptation: {label: 'Adaptação', color: '#9C27B0', icon: 'swap-horizontal'},\n  experiment: {label: 'Experimento', color: '#F44336', icon: 'flask'},\n};\n\nconst RecipeVersionHistory: React.FC<RecipeVersionHistoryProps> = ({\n  recipe,\n  versions,\n  onCreateVersion,\n  onRestoreVersion,\n  onDeleteVersion,\n  onViewVersion,\n  onCompareVersions,\n  loading = false,\n  style,\n}) => {\n  const [menuVisible, setMenuVisible] = useState<string | null>(null);\n  const [selectedVersions, setSelectedVersions] = useState<string[]>([]);\n  const [compareMode, setCompareMode] = useState(false);\n\n  const sortedVersions = React.useMemo(() => {\n    return [...versions].sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }, [versions]);\n\n  const currentVersion = sortedVersions.find(v => v.isCurrent) || sortedVersions[0];\n\n  const handleCreateVersion = useCallback(() => {\n    onCreateVersion(currentVersion?.id);\n  }, [onCreateVersion, currentVersion]);\n\n  const handleRestoreVersion = useCallback((version: RecipeVersion) => {\n    Alert.alert(\n      'Restaurar Versão',\n      `Tem certeza que deseja restaurar a versão \"${version.name}\"? A versão atual será salva no histórico.`,\n      [\n        {text: 'Cancelar', style: 'cancel'},\n        {\n          text: 'Restaurar',\n          style: 'destructive',\n          onPress: () => {\n            onRestoreVersion(version.id);\n            setMenuVisible(null);\n          },\n        },\n      ]\n    );\n  }, [onRestoreVersion]);\n\n  const handleDeleteVersion = useCallback((version: RecipeVersion) => {\n    if (version.isCurrent) {\n      Alert.alert(\n        'Erro',\n        'Não é possível excluir a versão atual da receita.',\n        [{text: 'OK'}]\n      );\n      return;\n    }\n\n    Alert.alert(\n      'Excluir Versão',\n      `Tem certeza que deseja excluir a versão \"${version.name}\"? Esta ação não pode ser desfeita.`,\n      [\n        {text: 'Cancelar', style: 'cancel'},\n        {\n          text: 'Excluir',\n          style: 'destructive',\n          onPress: () => {\n            onDeleteVersion(version.id);\n            setMenuVisible(null);\n          },\n        },\n      ]\n    );\n  }, [onDeleteVersion]);\n\n  const handleToggleCompareMode = useCallback(() => {\n    setCompareMode(!compareMode);\n    setSelectedVersions([]);\n  }, [compareMode]);\n\n  const handleSelectVersion = useCallback((versionId: string) => {\n    if (selectedVersions.includes(versionId)) {\n      setSelectedVersions(prev => prev.filter(id => id !== versionId));\n    } else if (selectedVersions.length < 2) {\n      setSelectedVersions(prev => [...prev, versionId]);\n    }\n  }, [selectedVersions]);\n\n  const handleCompareVersions = useCallback(() => {\n    if (selectedVersions.length === 2) {\n      onCompareVersions(selectedVersions[0], selectedVersions[1]);\n      setCompareMode(false);\n      setSelectedVersions([]);\n    }\n  }, [selectedVersions, onCompareVersions]);\n\n  const formatDate = useCallback((date: Date) => {\n    return date.toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  }, []);\n\n  const getVersionChanges = useCallback((version: RecipeVersion) => {\n    const changes = [];\n    if (version.changes?.ingredients) changes.push('Ingredientes');\n    if (version.changes?.instructions) changes.push('Instruções');\n    if (version.changes?.metadata) changes.push('Informações');\n    if (version.changes?.images) changes.push('Imagens');\n    return changes;\n  }, []);\n\n  return (\n    <View style={[styles.container, style]}>\n      {/* Header */}\n      <View style={styles.header}>\n        <View style={styles.headerInfo}>\n          <Text variant=\"titleMedium\" style={styles.title}>\n            Histórico de Versões ({versions.length})\n          </Text>\n          <Text variant=\"bodySmall\" style={styles.subtitle}>\n            Versão atual: {currentVersion?.name || 'Sem nome'}\n          </Text>\n        </View>\n        \n        <View style={styles.headerActions}>\n          {versions.length > 1 && (\n            <Button\n              mode={compareMode ? 'contained' : 'outlined'}\n              icon=\"compare\"\n              onPress={handleToggleCompareMode}\n              compact>\n              {compareMode ? 'Cancelar' : 'Comparar'}\n            </Button>\n          )}\n          \n          <Button\n            mode=\"contained\"\n            icon=\"plus\"\n            onPress={handleCreateVersion}\n            disabled={loading}\n            compact>\n            Nova Versão\n          </Button>\n        </View>\n      </View>\n\n      {/* Compare Actions */}\n      {compareMode && (\n        <Card style={styles.compareCard}>\n          <Card.Content>\n            <View style={styles.compareHeader}>\n              <Text variant=\"titleSmall\" style={styles.compareTitle}>\n                Selecione 2 versões para comparar\n              </Text>\n              <Text variant=\"bodySmall\" style={styles.compareSubtitle}>\n                {selectedVersions.length}/2 selecionadas\n              </Text>\n            </View>\n            \n            {selectedVersions.length === 2 && (\n              <Button\n                mode=\"contained\"\n                icon=\"compare\"\n                onPress={handleCompareVersions}\n                style={styles.compareButton}>\n                Comparar Versões\n              </Button>\n            )}\n          </Card.Content>\n        </Card>\n      )}\n\n      {/* Versions List */}\n      <ScrollView style={styles.versionsList} showsVerticalScrollIndicator={false}>\n        {sortedVersions.map((version, index) => {\n          const versionType = VERSION_TYPES[version.type as keyof typeof VERSION_TYPES] || VERSION_TYPES.modification;\n          const changes = getVersionChanges(version);\n          const isSelected = selectedVersions.includes(version.id);\n          const canSelect = compareMode && (isSelected || selectedVersions.length < 2);\n\n          return (\n            <Card \n              key={version.id} \n              style={[\n                styles.versionCard,\n                version.isCurrent && styles.currentVersionCard,\n                isSelected && styles.selectedVersionCard,\n              ]}>\n              <Card.Content>\n                {/* Version Header */}\n                <View style={styles.versionHeader}>\n                  <View style={styles.versionInfo}>\n                    {compareMode && canSelect && (\n                      <IconButton\n                        icon={isSelected ? 'checkbox-marked' : 'checkbox-blank-outline'}\n                        size={20}\n                        onPress={() => handleSelectVersion(version.id)}\n                        style={styles.selectButton}\n                      />\n                    )}\n                    \n                    <View style={styles.versionDetails}>\n                      <View style={styles.versionTitleRow}>\n                        <Text variant=\"titleSmall\" style={styles.versionName}>\n                          {version.name || `Versão ${versions.length - index}`}\n                        </Text>\n                        \n                        {version.isCurrent && (\n                          <Badge style={styles.currentBadge}>Atual</Badge>\n                        )}\n                      </View>\n                      \n                      <View style={styles.versionMeta}>\n                        <Chip\n                          mode=\"flat\"\n                          icon={versionType.icon}\n                          style={[\n                            styles.typeChip,\n                            {backgroundColor: versionType.color + '20'},\n                          ]}\n                          textStyle={{color: versionType.color}}\n                          compact>\n                          {versionType.label}\n                        </Chip>\n                        \n                        <Text variant=\"bodySmall\" style={styles.versionDate}>\n                          {formatDate(new Date(version.createdAt))}\n                        </Text>\n                      </View>\n                    </View>\n                  </View>\n\n                  {!compareMode && (\n                    <Menu\n                      visible={menuVisible === version.id}\n                      onDismiss={() => setMenuVisible(null)}\n                      anchor={\n                        <IconButton\n                          icon=\"dots-vertical\"\n                          size={20}\n                          onPress={() => setMenuVisible(version.id)}\n                        />\n                      }>\n                      <Menu.Item\n                        onPress={() => {\n                          onViewVersion(version);\n                          setMenuVisible(null);\n                        }}\n                        title=\"Visualizar\"\n                        leadingIcon=\"eye\"\n                      />\n                      \n                      <Menu.Item\n                        onPress={() => onCreateVersion(version.id)}\n                        title=\"Criar versão baseada nesta\"\n                        leadingIcon=\"content-copy\"\n                      />\n                      \n                      {!version.isCurrent && (\n                        <Menu.Item\n                          onPress={() => handleRestoreVersion(version)}\n                          title=\"Restaurar esta versão\"\n                          leadingIcon=\"restore\"\n                        />\n                      )}\n                      \n                      <Divider />\n                      \n                      {!version.isCurrent && (\n                        <Menu.Item\n                          onPress={() => handleDeleteVersion(version)}\n                          title=\"Excluir\"\n                          leadingIcon=\"delete\"\n                          titleStyle={{color: theme.colors.error}}\n                        />\n                      )}\n                    </Menu>\n                  )}\n                </View>\n\n                {/* Version Description */}\n                {version.description && (\n                  <Text variant=\"bodyMedium\" style={styles.versionDescription}>\n                    {version.description}\n                  </Text>\n                )}\n\n                {/* Changes Summary */}\n                {changes.length > 0 && (\n                  <View style={styles.changesContainer}>\n                    <Text variant=\"bodySmall\" style={styles.changesLabel}>\n                      Alterações:\n                    </Text>\n                    <View style={styles.changesList}>\n                      {changes.map((change, idx) => (\n                        <Chip\n                          key={idx}\n                          mode=\"outlined\"\n                          style={styles.changeChip}\n                          compact>\n                          {change}\n                        </Chip>\n                      ))}\n                    </View>\n                  </View>\n                )}\n\n                {/* Version Stats */}\n                <View style={styles.versionStats}>\n                  <Text variant=\"bodySmall\" style={styles.statText}>\n                    {version.rating && `⭐ ${version.rating.toFixed(1)} • `}\n                    {version.timesUsed || 0} {version.timesUsed === 1 ? 'uso' : 'usos'}\n                  </Text>\n                </View>\n              </Card.Content>\n            </Card>\n          );\n        })}\n\n        {versions.length === 0 && (\n          <Card style={styles.emptyCard}>\n            <Card.Content style={styles.emptyContent}>\n              <Text variant=\"bodyMedium\" style={styles.emptyText}>\n                Nenhuma versão salva\n              </Text>\n              <Text variant=\"bodySmall\" style={styles.emptySubtext}>\n                Crie versões para experimentar modificações sem perder a receita original\n              </Text>\n            </Card.Content>\n          </Card>\n        )}\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 16,\n  },\n  headerInfo: {\n    flex: 1,\n  },\n  title: {\n    fontWeight: 'bold',\n    color: theme.colors.primary,\n    marginBottom: 4,\n  },\n  subtitle: {\n    opacity: 0.7,\n  },\n  headerActions: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  compareCard: {\n    marginBottom: 16,\n    elevation: 2,\n    backgroundColor: theme.colors.primaryContainer || theme.colors.surface,\n  },\n  compareHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  compareTitle: {\n    fontWeight: '600',\n  },\n  compareSubtitle: {\n    opacity: 0.7,\n  },\n  compareButton: {\n    alignSelf: 'center',\n  },\n  versionsList: {\n    flex: 1,\n  },\n  versionCard: {\n    marginBottom: 12,\n    elevation: 1,\n  },\n  currentVersionCard: {\n    borderWidth: 2,\n    borderColor: theme.colors.primary,\n    elevation: 2,\n  },\n  selectedVersionCard: {\n    borderWidth: 2,\n    borderColor: theme.colors.secondary || theme.colors.primary,\n    backgroundColor: theme.colors.secondaryContainer || theme.colors.primaryContainer,\n  },\n  versionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  versionInfo: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    flex: 1,\n  },\n  selectButton: {\n    margin: 0,\n    marginRight: 8,\n  },\n  versionDetails: {\n    flex: 1,\n  },\n  versionTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  versionName: {\n    fontWeight: '600',\n    flex: 1,\n  },\n  currentBadge: {\n    backgroundColor: theme.colors.primary,\n    color: theme.colors.onPrimary,\n  },\n  versionMeta: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n  },\n  typeChip: {\n    height: 24,\n  },\n  versionDate: {\n    opacity: 0.7,\n  },\n  versionDescription: {\n    lineHeight: 20,\n    marginBottom: 12,\n    fontStyle: 'italic',\n  },\n  changesContainer: {\n    marginBottom: 12,\n  },\n  changesLabel: {\n    fontWeight: '500',\n    marginBottom: 6,\n  },\n  changesList: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 6,\n  },\n  changeChip: {\n    height: 24,\n  },\n  versionStats: {\n    borderTopWidth: 1,\n    borderTopColor: theme.colors.outline + '20',\n    paddingTop: 8,\n  },\n  statText: {\n    opacity: 0.7,\n  },\n  emptyCard: {\n    marginTop: 16,\n  },\n  emptyContent: {\n    alignItems: 'center',\n    paddingVertical: 32,\n  },\n  emptyText: {\n    fontWeight: '500',\n    marginBottom: 8,\n  },\n  emptySubtext: {\n    opacity: 0.7,\n    textAlign: 'center',\n    lineHeight: 18,\n  },\n});\n\nexport default RecipeVersionHistory;
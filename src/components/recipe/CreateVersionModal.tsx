import React, {useState, useCallback, useEffect} from 'react';\nimport {View, StyleSheet, ScrollView} from 'react-native';\nimport {\n  Modal,\n  Portal,\n  Text,\n  Button,\n  TextInput,\n  IconButton,\n  Card,\n  Chip,\n  RadioButton,\n} from 'react-native-paper';\nimport {Recipe, CreateRecipeVersionInput} from '@/types';\nimport {theme} from '@/utils/theme';\n\ninterface CreateVersionModalProps {\n  visible: boolean;\n  onDismiss: () => void;\n  onSave: (versionData: CreateRecipeVersionInput) => void;\n  recipe: Recipe;\n  baseVersion?: any; // RecipeVersion\n  loading?: boolean;\n}\n\nconst VERSION_TYPES = {\n  modification: {label: 'Modificação', description: 'Pequenos ajustes na receita original', icon: 'pencil', color: '#FF9800'},\n  improvement: {label: 'Melhoria', description: 'Aperfeiçoamentos baseados na experiência', icon: 'trending-up', color: '#4CAF50'},\n  adaptation: {label: 'Adaptação', description: 'Ajustes para diferentes necessidades ou ingredientes', icon: 'swap-horizontal', color: '#9C27B0'},\n  experiment: {label: 'Experimento', description: 'Teste de novas ideias e variações', icon: 'flask', color: '#F44336'},\n};\n\nconst CHANGE_REASONS = [\n  'Melhorar o sabor',\n  'Reduzir tempo de preparo',\n  'Substituir ingredientes',\n  'Ajustar para dieta específica',\n  'Corrigir problemas',\n  'Adaptar para ocasião especial',\n  'Experimentar nova técnica',\n  'Personalizar preferências',\n];\n\nconst CreateVersionModal: React.FC<CreateVersionModalProps> = ({\n  visible,\n  onDismiss,\n  onSave,\n  recipe,\n  baseVersion,\n  loading = false,\n}) => {\n  const [versionName, setVersionName] = useState('');\n  const [versionType, setVersionType] = useState<keyof typeof VERSION_TYPES>('modification');\n  const [description, setDescription] = useState('');\n  const [changeReason, setChangeReason] = useState('');\n  const [customReason, setCustomReason] = useState('');\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [tags, setTags] = useState<string[]>([]);\n  const [newTag, setNewTag] = useState('');\n\n  // Reset form when modal opens\n  useEffect(() => {\n    if (visible) {\n      const baseName = baseVersion ? baseVersion.name : recipe.title;\n      setVersionName(`${baseName} - Modificada`);\n      setVersionType('modification');\n      setDescription('');\n      setChangeReason('');\n      setCustomReason('');\n      setIsPrivate(false);\n      setTags([]);\n      setNewTag('');\n    }\n  }, [visible, recipe, baseVersion]);\n\n  const handleSave = useCallback(() => {\n    const finalReason = changeReason === 'custom' ? customReason : changeReason;\n    \n    const versionData: CreateRecipeVersionInput = {\n      recipeId: recipe.id,\n      baseVersionId: baseVersion?.id,\n      name: versionName.trim(),\n      type: versionType,\n      description: description.trim() || undefined,\n      changeReason: finalReason.trim() || undefined,\n      isPrivate,\n      tags: tags.length > 0 ? tags : undefined,\n    };\n\n    onSave(versionData);\n  }, [\n    recipe.id,\n    baseVersion,\n    versionName,\n    versionType,\n    description,\n    changeReason,\n    customReason,\n    isPrivate,\n    tags,\n    onSave,\n  ]);\n\n  const handleAddTag = useCallback(() => {\n    if (newTag.trim() && !tags.includes(newTag.trim())) {\n      setTags(prev => [...prev, newTag.trim()]);\n      setNewTag('');\n    }\n  }, [newTag, tags]);\n\n  const handleRemoveTag = useCallback((tagToRemove: string) => {\n    setTags(prev => prev.filter(tag => tag !== tagToRemove));\n  }, []);\n\n  const isFormValid = versionName.trim().length > 0;\n  const selectedVersionType = VERSION_TYPES[versionType];\n\n  return (\n    <Portal>\n      <Modal\n        visible={visible}\n        onDismiss={onDismiss}\n        contentContainerStyle={styles.modal}>\n        <View style={styles.header}>\n          <IconButton icon=\"close\" onPress={onDismiss} />\n          <View style={styles.headerContent}>\n            <Text variant=\"headlineSmall\" style={styles.title}>\n              Nova Versão\n            </Text>\n            <Text variant=\"bodyMedium\" style={styles.subtitle}>\n              {baseVersion ? `Baseada em: ${baseVersion.name}` : `Baseada em: ${recipe.title}`}\n            </Text>\n          </View>\n          <View style={styles.headerSpacer} />\n        </View>\n\n        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n          {/* Version Name */}\n          <Card style={styles.section}>\n            <Card.Content>\n              <Text variant=\"titleSmall\" style={styles.sectionTitle}>\n                Nome da Versão\n              </Text>\n              <TextInput\n                mode=\"outlined\"\n                value={versionName}\n                onChangeText={setVersionName}\n                placeholder=\"Ex: Receita Original - Sem Glúten\"\n                style={styles.input}\n              />\n            </Card.Content>\n          </Card>\n\n          {/* Version Type */}\n          <Card style={styles.section}>\n            <Card.Content>\n              <Text variant=\"titleSmall\" style={styles.sectionTitle}>\n                Tipo de Versão\n              </Text>\n              <RadioButton.Group\n                onValueChange={(value) => setVersionType(value as keyof typeof VERSION_TYPES)}\n                value={versionType}>\n                {Object.entries(VERSION_TYPES).map(([key, type]) => (\n                  <View key={key} style={styles.radioOption}>\n                    <View style={styles.radioRow}>\n                      <RadioButton value={key} />\n                      <View style={styles.radioContent}>\n                        <View style={styles.radioHeader}>\n                          <Text variant=\"bodyMedium\" style={styles.radioLabel}>\n                            {type.label}\n                          </Text>\n                          <Chip\n                            mode=\"flat\"\n                            icon={type.icon}\n                            style={[\n                              styles.typeChip,\n                              {backgroundColor: type.color + '20'},\n                            ]}\n                            textStyle={{color: type.color}}\n                            compact>\n                            {type.icon}\n                          </Chip>\n                        </View>\n                        <Text variant=\"bodySmall\" style={styles.radioDescription}>\n                          {type.description}\n                        </Text>\n                      </View>\n                    </View>\n                  </View>\n                ))}\n              </RadioButton.Group>\n            </Card.Content>\n          </Card>\n\n          {/* Description */}\n          <Card style={styles.section}>\n            <Card.Content>\n              <Text variant=\"titleSmall\" style={styles.sectionTitle}>\n                Descrição (opcional)\n              </Text>\n              <TextInput\n                mode=\"outlined\"\n                value={description}\n                onChangeText={setDescription}\n                placeholder=\"Descreva as principais mudanças desta versão...\"\n                multiline\n                numberOfLines={3}\n                style={styles.input}\n              />\n            </Card.Content>\n          </Card>\n\n          {/* Change Reason */}\n          <Card style={styles.section}>\n            <Card.Content>\n              <Text variant=\"titleSmall\" style={styles.sectionTitle}>\n                Motivo da Modificação\n              </Text>\n              <RadioButton.Group\n                onValueChange={setChangeReason}\n                value={changeReason}>\n                {CHANGE_REASONS.map((reason) => (\n                  <View key={reason} style={styles.reasonOption}>\n                    <RadioButton value={reason} />\n                    <Text variant=\"bodyMedium\" style={styles.reasonLabel}>\n                      {reason}\n                    </Text>\n                  </View>\n                ))}\n                <View style={styles.reasonOption}>\n                  <RadioButton value=\"custom\" />\n                  <View style={styles.customReasonContainer}>\n                    <Text variant=\"bodyMedium\" style={styles.reasonLabel}>\n                      Outro motivo:\n                    </Text>\n                    <TextInput\n                      mode=\"outlined\"\n                      value={customReason}\n                      onChangeText={setCustomReason}\n                      placeholder=\"Digite o motivo...\"\n                      style={styles.customReasonInput}\n                      disabled={changeReason !== 'custom'}\n                    />\n                  </View>\n                </View>\n              </RadioButton.Group>\n            </Card.Content>\n          </Card>\n\n          {/* Tags */}\n          <Card style={styles.section}>\n            <Card.Content>\n              <Text variant=\"titleSmall\" style={styles.sectionTitle}>\n                Tags (opcional)\n              </Text>\n              <Text variant=\"bodySmall\" style={styles.sectionDescription}>\n                Adicione tags para organizar suas versões\n              </Text>\n              \n              <View style={styles.tagInput}>\n                <TextInput\n                  mode=\"outlined\"\n                  value={newTag}\n                  onChangeText={setNewTag}\n                  placeholder=\"Ex: sem-lactose, vegana, rápida\"\n                  style={styles.tagTextInput}\n                  onSubmitEditing={handleAddTag}\n                />\n                <Button\n                  mode=\"outlined\"\n                  onPress={handleAddTag}\n                  disabled={!newTag.trim()}\n                  compact>\n                  Adicionar\n                </Button>\n              </View>\n              \n              {tags.length > 0 && (\n                <View style={styles.tagsList}>\n                  {tags.map((tag) => (\n                    <Chip\n                      key={tag}\n                      mode=\"flat\"\n                      onClose={() => handleRemoveTag(tag)}\n                      style={styles.tag}>\n                      {tag}\n                    </Chip>\n                  ))}\n                </View>\n              )}\n            </Card.Content>\n          </Card>\n\n          {/* Privacy */}\n          <Card style={styles.section}>\n            <Card.Content>\n              <Text variant=\"titleSmall\" style={styles.sectionTitle}>\n                Privacidade\n              </Text>\n              <View style={styles.privacyContainer}>\n                <Chip\n                  mode={isPrivate ? 'flat' : 'outlined'}\n                  selected={isPrivate}\n                  onPress={() => setIsPrivate(!isPrivate)}\n                  icon={isPrivate ? 'lock' : 'lock-open'}\n                  style={styles.privacyChip}>\n                  {isPrivate ? 'Versão Privada' : 'Versão Pública'}\n                </Chip>\n                <Text variant=\"bodySmall\" style={styles.privacyDescription}>\n                  {isPrivate \n                    ? 'Apenas você pode ver esta versão'\n                    : 'Outros usuários podem ver esta versão'\n                  }\n                </Text>\n              </View>\n            </Card.Content>\n          </Card>\n        </ScrollView>\n\n        {/* Actions */}\n        <View style={styles.actions}>\n          <Button\n            mode=\"outlined\"\n            onPress={onDismiss}\n            disabled={loading}\n            style={styles.actionButton}>\n            Cancelar\n          </Button>\n          <Button\n            mode=\"contained\"\n            onPress={handleSave}\n            disabled={!isFormValid || loading}\n            loading={loading}\n            style={styles.actionButton}>\n            Criar Versão\n          </Button>\n        </View>\n      </Modal>\n    </Portal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  modal: {\n    backgroundColor: theme.colors.surface,\n    margin: 20,\n    borderRadius: theme.roundness,\n    maxHeight: '90%',\n    flex: 1,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    paddingBottom: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: theme.colors.outline + '20',\n  },\n  headerContent: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerSpacer: {\n    width: 48,\n  },\n  title: {\n    fontWeight: 'bold',\n    color: theme.colors.primary,\n  },\n  subtitle: {\n    opacity: 0.7,\n    textAlign: 'center',\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  section: {\n    marginBottom: 16,\n    elevation: 1,\n  },\n  sectionTitle: {\n    fontWeight: '600',\n    marginBottom: 8,\n    color: theme.colors.primary,\n  },\n  sectionDescription: {\n    opacity: 0.7,\n    marginBottom: 12,\n    lineHeight: 16,\n  },\n  input: {\n    backgroundColor: theme.colors.background,\n  },\n  radioOption: {\n    marginBottom: 12,\n  },\n  radioRow: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n  },\n  radioContent: {\n    flex: 1,\n    marginLeft: 8,\n  },\n  radioHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 4,\n  },\n  radioLabel: {\n    fontWeight: '500',\n  },\n  radioDescription: {\n    opacity: 0.7,\n    lineHeight: 16,\n  },\n  typeChip: {\n    height: 24,\n  },\n  reasonOption: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  reasonLabel: {\n    marginLeft: 8,\n    flex: 1,\n  },\n  customReasonContainer: {\n    flex: 1,\n    marginLeft: 8,\n  },\n  customReasonInput: {\n    backgroundColor: theme.colors.background,\n    marginTop: 8,\n  },\n  tagInput: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 12,\n  },\n  tagTextInput: {\n    flex: 1,\n    backgroundColor: theme.colors.background,\n  },\n  tagsList: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 6,\n  },\n  tag: {\n    marginBottom: 4,\n  },\n  privacyContainer: {\n    alignItems: 'flex-start',\n  },\n  privacyChip: {\n    marginBottom: 8,\n  },\n  privacyDescription: {\n    opacity: 0.7,\n    lineHeight: 16,\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    padding: 16,\n    paddingTop: 8,\n    borderTopWidth: 1,\n    borderTopColor: theme.colors.outline + '20',\n    gap: 12,\n  },\n  actionButton: {\n    minWidth: 100,\n  },\n});\n\nexport default CreateVersionModal;